{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nimport { SubjectSubscription } from \"./Utils\";\n/** Stream implementation to stream items to the server. */\nvar Subject = /** @class */function () {\n  function Subject() {\n    this.observers = [];\n  }\n  Subject.prototype.next = function (item) {\n    for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {\n      var observer = _a[_i];\n      observer.next(item);\n    }\n  };\n  Subject.prototype.error = function (err) {\n    for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {\n      var observer = _a[_i];\n      if (observer.error) {\n        observer.error(err);\n      }\n    }\n  };\n  Subject.prototype.complete = function () {\n    for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {\n      var observer = _a[_i];\n      if (observer.complete) {\n        observer.complete();\n      }\n    }\n  };\n  Subject.prototype.subscribe = function (observer) {\n    this.observers.push(observer);\n    return new SubjectSubscription(this, observer);\n  };\n  return Subject;\n}();\nexport { Subject };","map":{"version":3,"names":["SubjectSubscription","Subject","observers","prototype","next","item","_i","_a","length","observer","error","err","complete","subscribe","push"],"sources":["../../src/Subject.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { SubjectSubscription } from \"./Utils\";\r\n\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    /** @internal */\r\n    public observers: Array<IStreamSubscriber<T>>;\r\n\r\n    /** @internal */\r\n    public cancelCallback?: () => Promise<void>;\r\n\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AAGA,SAASA,mBAAmB,QAAQ,SAAS;AAE7C;AACA,IAAAC,OAAA;EAOI,SAAAA,QAAA;IACI,IAAI,CAACC,SAAS,GAAG,EAAE;EACvB;EAEOD,OAAA,CAAAE,SAAA,CAAAC,IAAI,GAAX,UAAYC,IAAO;IACf,KAAuB,IAAAC,EAAA,IAAc,EAAdC,EAAA,OAAI,CAACL,SAAS,EAAdI,EAAA,GAAAC,EAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc,EAAE;MAAlC,IAAMG,QAAQ,GAAAF,EAAA,CAAAD,EAAA;MACfG,QAAQ,CAACL,IAAI,CAACC,IAAI,CAAC;;EAE3B,CAAC;EAEMJ,OAAA,CAAAE,SAAA,CAAAO,KAAK,GAAZ,UAAaC,GAAQ;IACjB,KAAuB,IAAAL,EAAA,IAAc,EAAdC,EAAA,OAAI,CAACL,SAAS,EAAdI,EAAA,GAAAC,EAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc,EAAE;MAAlC,IAAMG,QAAQ,GAAAF,EAAA,CAAAD,EAAA;MACf,IAAIG,QAAQ,CAACC,KAAK,EAAE;QAChBD,QAAQ,CAACC,KAAK,CAACC,GAAG,CAAC;;;EAG/B,CAAC;EAEMV,OAAA,CAAAE,SAAA,CAAAS,QAAQ,GAAf;IACI,KAAuB,IAAAN,EAAA,IAAc,EAAdC,EAAA,OAAI,CAACL,SAAS,EAAdI,EAAA,GAAAC,EAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc,EAAE;MAAlC,IAAMG,QAAQ,GAAAF,EAAA,CAAAD,EAAA;MACf,IAAIG,QAAQ,CAACG,QAAQ,EAAE;QACnBH,QAAQ,CAACG,QAAQ,EAAE;;;EAG/B,CAAC;EAEMX,OAAA,CAAAE,SAAA,CAAAU,SAAS,GAAhB,UAAiBJ,QAA8B;IAC3C,IAAI,CAACP,SAAS,CAACY,IAAI,CAACL,QAAQ,CAAC;IAC7B,OAAO,IAAIT,mBAAmB,CAAC,IAAI,EAAES,QAAQ,CAAC;EAClD,CAAC;EACL,OAAAR,OAAC;AAAD,CAAC,CArCD"},"metadata":{},"sourceType":"module"}