{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n  }\n  return t;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { AbortController } from \"./AbortController\";\nimport { HttpError, TimeoutError } from \"./Errors\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\n// Not exported from 'index', this type is internal.\n/** @private */\nvar LongPollingTransport = /** @class */function () {\n  function LongPollingTransport(httpClient, accessTokenFactory, logger, logMessageContent, withCredentials, headers) {\n    this.httpClient = httpClient;\n    this.accessTokenFactory = accessTokenFactory;\n    this.logger = logger;\n    this.pollAbort = new AbortController();\n    this.logMessageContent = logMessageContent;\n    this.withCredentials = withCredentials;\n    this.headers = headers;\n    this.running = false;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n  Object.defineProperty(LongPollingTransport.prototype, \"pollAborted\", {\n    // This is an internal type, not exported from 'index' so this is really just internal.\n    get: function get() {\n      return this.pollAbort.aborted;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  LongPollingTransport.prototype.connect = function (url, transferFormat) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, name, value, headers, pollOptions, token, pollUrl, response;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            Arg.isRequired(url, \"url\");\n            Arg.isRequired(transferFormat, \"transferFormat\");\n            Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n            this.url = url;\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\n            // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\n            if (transferFormat === TransferFormat.Binary && typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\") {\n              throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\n            }\n            _b = getUserAgentHeader(), name = _b[0], value = _b[1];\n            headers = __assign((_a = {}, _a[name] = value, _a), this.headers);\n            pollOptions = {\n              abortSignal: this.pollAbort.signal,\n              headers: headers,\n              timeout: 100000,\n              withCredentials: this.withCredentials\n            };\n            if (transferFormat === TransferFormat.Binary) {\n              pollOptions.responseType = \"arraybuffer\";\n            }\n            return [4 /*yield*/, this.getAccessToken()];\n          case 1:\n            token = _c.sent();\n            this.updateHeaderToken(pollOptions, token);\n            pollUrl = url + \"&_=\" + Date.now();\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) polling: \" + pollUrl + \".\");\n            return [4 /*yield*/, this.httpClient.get(pollUrl, pollOptions)];\n          case 2:\n            response = _c.sent();\n            if (response.statusCode !== 200) {\n              this.logger.log(LogLevel.Error, \"(LongPolling transport) Unexpected response code: \" + response.statusCode + \".\");\n              // Mark running as false so that the poll immediately ends and runs the close logic\n              this.closeError = new HttpError(response.statusText || \"\", response.statusCode);\n              this.running = false;\n            } else {\n              this.running = true;\n            }\n            this.receiving = this.poll(this.url, pollOptions);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  LongPollingTransport.prototype.getAccessToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.accessTokenFactory) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.accessTokenFactory()];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n          case 2:\n            return [2 /*return*/, null];\n        }\n      });\n    });\n  };\n  LongPollingTransport.prototype.updateHeaderToken = function (request, token) {\n    if (!request.headers) {\n      request.headers = {};\n    }\n    if (token) {\n      // tslint:disable-next-line:no-string-literal\n      request.headers[\"Authorization\"] = \"Bearer \" + token;\n      return;\n    }\n    // tslint:disable-next-line:no-string-literal\n    if (request.headers[\"Authorization\"]) {\n      // tslint:disable-next-line:no-string-literal\n      delete request.headers[\"Authorization\"];\n    }\n  };\n  LongPollingTransport.prototype.poll = function (url, pollOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var token, pollUrl, response, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0,, 8, 9]);\n            _a.label = 1;\n          case 1:\n            if (!this.running) return [3 /*break*/, 7];\n            return [4 /*yield*/, this.getAccessToken()];\n          case 2:\n            token = _a.sent();\n            this.updateHeaderToken(pollOptions, token);\n            _a.label = 3;\n          case 3:\n            _a.trys.push([3, 5,, 6]);\n            pollUrl = url + \"&_=\" + Date.now();\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) polling: \" + pollUrl + \".\");\n            return [4 /*yield*/, this.httpClient.get(pollUrl, pollOptions)];\n          case 4:\n            response = _a.sent();\n            if (response.statusCode === 204) {\n              this.logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\n              this.running = false;\n            } else if (response.statusCode !== 200) {\n              this.logger.log(LogLevel.Error, \"(LongPolling transport) Unexpected response code: \" + response.statusCode + \".\");\n              // Unexpected status code\n              this.closeError = new HttpError(response.statusText || \"\", response.statusCode);\n              this.running = false;\n            } else {\n              // Process the response\n              if (response.content) {\n                this.logger.log(LogLevel.Trace, \"(LongPolling transport) data received. \" + getDataDetail(response.content, this.logMessageContent) + \".\");\n                if (this.onreceive) {\n                  this.onreceive(response.content);\n                }\n              } else {\n                // This is another way timeout manifest.\n                this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n              }\n            }\n            return [3 /*break*/, 6];\n          case 5:\n            e_1 = _a.sent();\n            if (!this.running) {\n              // Log but disregard errors that occur after stopping\n              this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll errored after shutdown: \" + e_1.message);\n            } else {\n              if (e_1 instanceof TimeoutError) {\n                // Ignore timeouts and reissue the poll.\n                this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n              } else {\n                // Close the connection with the error as the result.\n                this.closeError = e_1;\n                this.running = false;\n              }\n            }\n            return [3 /*break*/, 6];\n          case 6:\n            return [3 /*break*/, 1];\n          case 7:\n            return [3 /*break*/, 9];\n          case 8:\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\n            if (!this.pollAborted) {\n              this.raiseOnClose();\n            }\n            return [7 /*endfinally*/];\n          case 9:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  LongPollingTransport.prototype.send = function (data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (!this.running) {\n          return [2 /*return*/, Promise.reject(new Error(\"Cannot send until the transport is connected\"))];\n        }\n        return [2 /*return*/, sendMessage(this.logger, \"LongPolling\", this.httpClient, this.url, this.accessTokenFactory, data, this.logMessageContent, this.withCredentials, this.headers)];\n      });\n    });\n  };\n  LongPollingTransport.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var headers, _a, name_1, value, deleteOptions, token;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\n            // Tell receiving loop to stop, abort any current request, and then wait for it to finish\n            this.running = false;\n            this.pollAbort.abort();\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1,, 5, 6]);\n            return [4 /*yield*/, this.receiving];\n          case 2:\n            _b.sent();\n            // Send DELETE to clean up long polling on the server\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) sending DELETE request to \" + this.url + \".\");\n            headers = {};\n            _a = getUserAgentHeader(), name_1 = _a[0], value = _a[1];\n            headers[name_1] = value;\n            deleteOptions = {\n              headers: __assign({}, headers, this.headers),\n              withCredentials: this.withCredentials\n            };\n            return [4 /*yield*/, this.getAccessToken()];\n          case 3:\n            token = _b.sent();\n            this.updateHeaderToken(deleteOptions, token);\n            return [4 /*yield*/, this.httpClient.delete(this.url, deleteOptions)];\n          case 4:\n            _b.sent();\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\n            return [3 /*break*/, 6];\n          case 5:\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\n            // Raise close event here instead of in polling\n            // It needs to happen after the DELETE request is sent\n            this.raiseOnClose();\n            return [7 /*endfinally*/];\n          case 6:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  LongPollingTransport.prototype.raiseOnClose = function () {\n    if (this.onclose) {\n      var logMessage = \"(LongPolling transport) Firing onclose event.\";\n      if (this.closeError) {\n        logMessage += \" Error: \" + this.closeError;\n      }\n      this.logger.log(LogLevel.Trace, logMessage);\n      this.onclose(this.closeError);\n    }\n  };\n  return LongPollingTransport;\n}();\nexport { LongPollingTransport };","map":{"version":3,"names":["AbortController","HttpError","TimeoutError","LogLevel","TransferFormat","Arg","getDataDetail","getUserAgentHeader","sendMessage","LongPollingTransport","httpClient","accessTokenFactory","logger","logMessageContent","withCredentials","headers","pollAbort","running","onreceive","onclose","Object","defineProperty","prototype","get","aborted","connect","url","transferFormat","isRequired","isIn","log","Trace","Binary","XMLHttpRequest","responseType","Error","_b","name","value","__assign","_a","pollOptions","abortSignal","signal","timeout","getAccessToken","token","_c","sent","updateHeaderToken","pollUrl","Date","now","response","statusCode","closeError","statusText","receiving","poll","request","Information","content","e_1","message","pollAborted","raiseOnClose","send","data","Promise","reject","stop","abort","name_1","deleteOptions","delete","logMessage"],"sources":["../../src/LongPollingTransport.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\n\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly withCredentials: boolean;\r\n    private readonly pollAbort: AbortController;\r\n    private readonly headers: MessageHeaders;\r\n\r\n    private url?: string;\r\n    private running: boolean;\r\n    private receiving?: Promise<void>;\r\n    private closeError?: Error;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted() {\r\n        return this.pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger, logMessageContent: boolean, withCredentials: boolean, headers: MessageHeaders) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logger = logger;\r\n        this.pollAbort = new AbortController();\r\n        this.logMessageContent = logMessageContent;\r\n        this.withCredentials = withCredentials;\r\n        this.headers = headers;\r\n\r\n        this.running = false;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.url = url;\r\n\r\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this.headers };\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this.pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this.withCredentials,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        const token = await this.getAccessToken();\r\n        this.updateHeaderToken(pollOptions, token);\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this.httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this.closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this.running = false;\r\n        } else {\r\n            this.running = true;\r\n        }\r\n\r\n        this.receiving = this.poll(this.url, pollOptions);\r\n    }\r\n\r\n    private async getAccessToken(): Promise<string | null> {\r\n        if (this.accessTokenFactory) {\r\n            return await this.accessTokenFactory();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private updateHeaderToken(request: HttpRequest, token: string | null) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (token) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            request.headers[\"Authorization\"] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-string-literal\r\n        if (request.headers[\"Authorization\"]) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            delete request.headers[\"Authorization\"];\r\n        }\r\n    }\r\n\r\n    private async poll(url: string, pollOptions: HttpRequest): Promise<void> {\r\n        try {\r\n            while (this.running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this.getAccessToken();\r\n                this.updateHeaderToken(pollOptions, token);\r\n\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this.httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this.logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n\r\n                        this.running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n                        // Unexpected status code\r\n                        this.closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this.running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this.logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this.logMessageContent)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this.running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this.logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            this.closeError = e;\r\n                            this.running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this.raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"LongPolling\", this.httpClient, this.url!, this.accessTokenFactory, data, this.logMessageContent, this.withCredentials, this.headers);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this.running = false;\r\n        this.pollAbort.abort();\r\n\r\n        try {\r\n            await this.receiving;\r\n\r\n            // Send DELETE to clean up long polling on the server\r\n            this.logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this.url}.`);\r\n\r\n            const headers = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: { ...headers, ...this.headers },\r\n                withCredentials: this.withCredentials,\r\n            };\r\n            const token = await this.getAccessToken();\r\n            this.updateHeaderToken(deleteOptions, token);\r\n            await this.httpClient.delete(this.url!, deleteOptions);\r\n\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        } finally {\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this.raiseOnClose();\r\n        }\r\n    }\r\n\r\n    private raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this.closeError) {\r\n                logMessage += \" Error: \" + this.closeError;\r\n            }\r\n            this.logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this.closeError);\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}