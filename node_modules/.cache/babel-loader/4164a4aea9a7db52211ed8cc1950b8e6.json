{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { AbortError } from \"./Errors\";\nimport { FetchHttpClient } from \"./FetchHttpClient\";\nimport { HttpClient } from \"./HttpClient\";\nimport { Platform } from \"./Utils\";\nimport { XhrHttpClient } from \"./XhrHttpClient\";\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\nvar DefaultHttpClient = /** @class */function (_super) {\n  __extends(DefaultHttpClient, _super);\n  /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\n  function DefaultHttpClient(logger) {\n    var _this = _super.call(this) || this;\n    if (typeof fetch !== \"undefined\" || Platform.isNode) {\n      _this.httpClient = new FetchHttpClient(logger);\n    } else if (typeof XMLHttpRequest !== \"undefined\") {\n      _this.httpClient = new XhrHttpClient(logger);\n    } else {\n      throw new Error(\"No usable HttpClient found.\");\n    }\n    return _this;\n  }\n  /** @inheritDoc */\n  DefaultHttpClient.prototype.send = function (request) {\n    // Check that abort was not signaled before calling send\n    if (request.abortSignal && request.abortSignal.aborted) {\n      return Promise.reject(new AbortError());\n    }\n    if (!request.method) {\n      return Promise.reject(new Error(\"No method defined.\"));\n    }\n    if (!request.url) {\n      return Promise.reject(new Error(\"No url defined.\"));\n    }\n    return this.httpClient.send(request);\n  };\n  DefaultHttpClient.prototype.getCookieString = function (url) {\n    return this.httpClient.getCookieString(url);\n  };\n  return DefaultHttpClient;\n}(HttpClient);\nexport { DefaultHttpClient };","map":{"version":3,"names":["AbortError","FetchHttpClient","HttpClient","Platform","XhrHttpClient","DefaultHttpClient","_super","__extends","logger","_this","call","fetch","isNode","httpClient","XMLHttpRequest","Error","prototype","send","request","abortSignal","aborted","Promise","reject","method","url","getCookieString"],"sources":["../../src/DefaultHttpClient.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortError } from \"./Errors\";\r\nimport { FetchHttpClient } from \"./FetchHttpClient\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger } from \"./ILogger\";\r\nimport { Platform } from \"./Utils\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n\r\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly httpClient: HttpClient;\r\n\r\n    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n\r\n        if (typeof fetch !== \"undefined\" || Platform.isNode) {\r\n            this.httpClient = new FetchHttpClient(logger);\r\n        } else if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this.httpClient = new XhrHttpClient(logger);\r\n        } else {\r\n            throw new Error(\"No usable HttpClient found.\");\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return this.httpClient.send(request);\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this.httpClient.getCookieString(url);\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;AAEA,SAASA,UAAU,QAAQ,UAAU;AACrC,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,UAAU,QAAmC,cAAc;AAEpE,SAASC,QAAQ,QAAQ,SAAS;AAClC,SAASC,aAAa,QAAQ,iBAAiB;AAE/C;AACA,IAAAC,iBAAA,0BAAAC,MAAA;EAAuCC,SAAA,CAAAF,iBAAA,EAAAC,MAAA;EAGnC;EACA,SAAAD,kBAAmBG,MAAe;IAAlC,IAAAC,KAAA,GACIH,MAAA,CAAAI,IAAA,MAAO;IAEP,IAAI,OAAOC,KAAK,KAAK,WAAW,IAAIR,QAAQ,CAACS,MAAM,EAAE;MACjDH,KAAI,CAACI,UAAU,GAAG,IAAIZ,eAAe,CAACO,MAAM,CAAC;KAChD,MAAM,IAAI,OAAOM,cAAc,KAAK,WAAW,EAAE;MAC9CL,KAAI,CAACI,UAAU,GAAG,IAAIT,aAAa,CAACI,MAAM,CAAC;KAC9C,MAAM;MACH,MAAM,IAAIO,KAAK,CAAC,6BAA6B,CAAC;;;EAEtD;EAEA;EACOV,iBAAA,CAAAW,SAAA,CAAAC,IAAI,GAAX,UAAYC,OAAoB;IAC5B;IACA,IAAIA,OAAO,CAACC,WAAW,IAAID,OAAO,CAACC,WAAW,CAACC,OAAO,EAAE;MACpD,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAItB,UAAU,EAAE,CAAC;;IAG3C,IAAI,CAACkB,OAAO,CAACK,MAAM,EAAE;MACjB,OAAOF,OAAO,CAACC,MAAM,CAAC,IAAIP,KAAK,CAAC,oBAAoB,CAAC,CAAC;;IAE1D,IAAI,CAACG,OAAO,CAACM,GAAG,EAAE;MACd,OAAOH,OAAO,CAACC,MAAM,CAAC,IAAIP,KAAK,CAAC,iBAAiB,CAAC,CAAC;;IAGvD,OAAO,IAAI,CAACF,UAAU,CAACI,IAAI,CAACC,OAAO,CAAC;EACxC,CAAC;EAEMb,iBAAA,CAAAW,SAAA,CAAAS,eAAe,GAAtB,UAAuBD,GAAW;IAC9B,OAAO,IAAI,CAACX,UAAU,CAACY,eAAe,CAACD,GAAG,CAAC;EAC/C,CAAC;EACL,OAAAnB,iBAAC;AAAD,CAAC,CApCsCH,UAAU"},"metadata":{},"sourceType":"module"}