{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nimport { TextMessageFormat } from \"./TextMessageFormat\";\nimport { isArrayBuffer } from \"./Utils\";\n/** @private */\nvar HandshakeProtocol = /** @class */function () {\n  function HandshakeProtocol() {}\n  // Handshake request is always JSON\n  HandshakeProtocol.prototype.writeHandshakeRequest = function (handshakeRequest) {\n    return TextMessageFormat.write(JSON.stringify(handshakeRequest));\n  };\n  HandshakeProtocol.prototype.parseHandshakeResponse = function (data) {\n    var responseMessage;\n    var messageData;\n    var remainingData;\n    if (isArrayBuffer(data) || typeof Buffer !== \"undefined\" && data instanceof Buffer) {\n      // Format is binary but still need to read JSON text from handshake response\n      var binaryData = new Uint8Array(data);\n      var separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\n      if (separatorIndex === -1) {\n        throw new Error(\"Message is incomplete.\");\n      }\n      // content before separator is handshake response\n      // optional content after is additional messages\n      var responseLength = separatorIndex + 1;\n      messageData = String.fromCharCode.apply(null, binaryData.slice(0, responseLength));\n      remainingData = binaryData.byteLength > responseLength ? binaryData.slice(responseLength).buffer : null;\n    } else {\n      var textData = data;\n      var separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\n      if (separatorIndex === -1) {\n        throw new Error(\"Message is incomplete.\");\n      }\n      // content before separator is handshake response\n      // optional content after is additional messages\n      var responseLength = separatorIndex + 1;\n      messageData = textData.substring(0, responseLength);\n      remainingData = textData.length > responseLength ? textData.substring(responseLength) : null;\n    }\n    // At this point we should have just the single handshake message\n    var messages = TextMessageFormat.parse(messageData);\n    var response = JSON.parse(messages[0]);\n    if (response.type) {\n      throw new Error(\"Expected a handshake response from the server.\");\n    }\n    responseMessage = response;\n    // multiple messages could have arrived with handshake\n    // return additional data to be parsed as usual, or null if all parsed\n    return [remainingData, responseMessage];\n  };\n  return HandshakeProtocol;\n}();\nexport { HandshakeProtocol };","map":{"version":3,"names":["TextMessageFormat","isArrayBuffer","HandshakeProtocol","prototype","writeHandshakeRequest","handshakeRequest","write","JSON","stringify","parseHandshakeResponse","data","responseMessage","messageData","remainingData","Buffer","binaryData","Uint8Array","separatorIndex","indexOf","RecordSeparatorCode","Error","responseLength","String","fromCharCode","apply","slice","byteLength","buffer","textData","RecordSeparator","substring","length","messages","parse","response","type"],"sources":["../../src/HandshakeProtocol.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\n/** @private */\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\n/** @private */\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n    readonly minorVersion: number;\r\n}\r\n\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (isArrayBuffer(data) || (typeof Buffer !== \"undefined\" && data instanceof Buffer)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, binaryData.slice(0, responseLength));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        responseMessage = response;\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AAEA,SAASA,iBAAiB,QAAQ,qBAAqB;AACvD,SAASC,aAAa,QAAQ,SAAS;AAcvC;AACA,IAAAC,iBAAA;EAAA,SAAAA,kBAAA,GAkDA;EAjDI;EACOA,iBAAA,CAAAC,SAAA,CAAAC,qBAAqB,GAA5B,UAA6BC,gBAAyC;IAClE,OAAOL,iBAAiB,CAACM,KAAK,CAACC,IAAI,CAACC,SAAS,CAACH,gBAAgB,CAAC,CAAC;EACpE,CAAC;EAEMH,iBAAA,CAAAC,SAAA,CAAAM,sBAAsB,GAA7B,UAA8BC,IAAS;IACnC,IAAIC,eAAyC;IAC7C,IAAIC,WAAmB;IACvB,IAAIC,aAAkB;IAEtB,IAAIZ,aAAa,CAACS,IAAI,CAAC,IAAK,OAAOI,MAAM,KAAK,WAAW,IAAIJ,IAAI,YAAYI,MAAO,EAAE;MAClF;MACA,IAAMC,UAAU,GAAG,IAAIC,UAAU,CAACN,IAAI,CAAC;MACvC,IAAMO,cAAc,GAAGF,UAAU,CAACG,OAAO,CAAClB,iBAAiB,CAACmB,mBAAmB,CAAC;MAChF,IAAIF,cAAc,KAAK,CAAC,CAAC,EAAE;QACvB,MAAM,IAAIG,KAAK,CAAC,wBAAwB,CAAC;;MAG7C;MACA;MACA,IAAMC,cAAc,GAAGJ,cAAc,GAAG,CAAC;MACzCL,WAAW,GAAGU,MAAM,CAACC,YAAY,CAACC,KAAK,CAAC,IAAI,EAAET,UAAU,CAACU,KAAK,CAAC,CAAC,EAAEJ,cAAc,CAAC,CAAC;MAClFR,aAAa,GAAIE,UAAU,CAACW,UAAU,GAAGL,cAAc,GAAIN,UAAU,CAACU,KAAK,CAACJ,cAAc,CAAC,CAACM,MAAM,GAAG,IAAI;KAC5G,MAAM;MACH,IAAMC,QAAQ,GAAWlB,IAAI;MAC7B,IAAMO,cAAc,GAAGW,QAAQ,CAACV,OAAO,CAAClB,iBAAiB,CAAC6B,eAAe,CAAC;MAC1E,IAAIZ,cAAc,KAAK,CAAC,CAAC,EAAE;QACvB,MAAM,IAAIG,KAAK,CAAC,wBAAwB,CAAC;;MAG7C;MACA;MACA,IAAMC,cAAc,GAAGJ,cAAc,GAAG,CAAC;MACzCL,WAAW,GAAGgB,QAAQ,CAACE,SAAS,CAAC,CAAC,EAAET,cAAc,CAAC;MACnDR,aAAa,GAAIe,QAAQ,CAACG,MAAM,GAAGV,cAAc,GAAIO,QAAQ,CAACE,SAAS,CAACT,cAAc,CAAC,GAAG,IAAI;;IAGlG;IACA,IAAMW,QAAQ,GAAGhC,iBAAiB,CAACiC,KAAK,CAACrB,WAAW,CAAC;IACrD,IAAMsB,QAAQ,GAAG3B,IAAI,CAAC0B,KAAK,CAACD,QAAQ,CAAC,CAAC,CAAC,CAAC;IACxC,IAAIE,QAAQ,CAACC,IAAI,EAAE;MACf,MAAM,IAAIf,KAAK,CAAC,gDAAgD,CAAC;;IAErET,eAAe,GAAGuB,QAAQ;IAE1B;IACA;IACA,OAAO,CAACrB,aAAa,EAAEF,eAAe,CAAC;EAC3C,CAAC;EACL,OAAAT,iBAAC;AAAD,CAAC,CAlDD"},"metadata":{},"sourceType":"module"}