{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\badsc\\\\Documents\\\\GitHub\\\\trading-dashboard-local\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\badsc\\\\Documents\\\\GitHub\\\\trading-dashboard-local\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _assertThisInitialized = require(\"C:\\\\Users\\\\badsc\\\\Documents\\\\GitHub\\\\trading-dashboard-local\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/assertThisInitialized\");\nvar _inherits = require(\"C:\\\\Users\\\\badsc\\\\Documents\\\\GitHub\\\\trading-dashboard-local\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nvar _createSuper = require(\"C:\\\\Users\\\\badsc\\\\Documents\\\\GitHub\\\\trading-dashboard-local\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\nvar typeOf = require('kind-of');\nvar Emitter = require('@sellside/emitter');\nvar _visit = require('collection-visit');\nvar _hasOwn = require('has-own-deep');\nvar _union = require('union-value');\nvar _del = require('unset-value');\nvar _get = require('get-value');\nvar _set = require('set-value');\n\n/**\n * Create an instance of `CacheBase`.\n *\n * ```js\n * const app = new CacheBase();\n * ```\n * @param {String|Object} `prop` (optional) Property name to use for the cache, or the object to initialize with.\n * @param {Object} `cache` (optional) An object to initialize with.\n * @constructor\n * @api public\n */\nvar CacheBase = /*#__PURE__*/function (_Emitter) {\n  _inherits(CacheBase, _Emitter);\n  var _super = _createSuper(CacheBase);\n  function CacheBase(prop, cache) {\n    var _this;\n    _classCallCheck(this, CacheBase);\n    _this = _super.call(this);\n    if (typeof prop !== 'string') {\n      cache = prop || cache;\n      prop = 'cache';\n    }\n    Reflect.defineProperty(_assertThisInitialized(_this), 'prop', {\n      value: prop\n    });\n    _this[_this.prop] = {};\n    if (cache) {\n      _this.set(cache);\n    }\n    return _this;\n  }\n\n  /**\n   * Assign `value` to `key`. Also emits `set` with the key and value.\n   *\n   * ```js\n   * app.on('set', function(key, val) {\n   *   // do something when `set` is emitted\n   * });\n   *\n   * app.set('admin', true);\n   *\n   * // also takes an object or an array of objects\n   * app.set({ name: 'Brian' });\n   * app.set([{ foo: 'bar' }, { baz: 'quux' }]);\n   * console.log(app);\n   * //=> { name: 'Brian', foo: 'bar', baz: 'quux' }\n   * ```\n   * @name .set\n   * @emits `set` with `key` and `value` as arguments.\n   * @param {String|Array} `key` The name of the property to set. Dot-notation may be used to set nested properties.\n   * @param {any} `value`\n   * @return {Object} Returns the instance for chaining.\n   * @api public\n   */\n  _createClass(CacheBase, [{\n    key: \"set\",\n    value: function set(key) {\n      for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        rest[_key - 1] = arguments[_key];\n      }\n      if (isObject(key) || rest.length === 0 && Array.isArray(key)) {\n        return this.visit.apply(this, ['set', key].concat(rest));\n      }\n      if (Array.isArray(key)) key = key.join('.');\n      _set.apply(void 0, [this[this.prop], key].concat(rest));\n      this.emit.apply(this, ['set', key].concat(rest));\n      return this;\n    }\n\n    /**\n     * Return the value of `key`.\n     *\n     * ```js\n     * app.set('a.b.c', 'd');\n     * app.get('a.b');\n     * //=> { c: 'd' }\n     * ```\n     * @name .get\n     * @emits `get` with `key` and `value` as arguments.\n     * @param {String|Array} `key` The name of the property to get. Dot-notation may be used to set nested properties.\n     * @return {any} Returns the value of `key`\n     * @api public\n     */\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      if (Array.isArray(key)) key = key.join('.');\n      var val = _get(this[this.prop], key);\n      if (typeof val === 'undefined' && this.defaults) {\n        val = _get(this.defaults, key);\n      }\n      this.emit('get', key, val);\n      return val;\n    }\n\n    /**\n     * Create a property on the cache with the given `value` only if it doesn't\n     * already exist.\n     *\n     * ```js\n     * console.log(app.cache); //=> {}\n     * app.set('one', { foo: 'bar' });\n     * app.prime('one', { a: 'b' });\n     * app.prime('two', { c: 'd' });\n     * console.log(app.cache.one); //=> { foo: 'bar' }\n     * console.log(app.cache.two); //=> { c: 'd' }\n     * ```\n     * @name .prime\n     * @param {String} `key` Property name or object path notation.\n     * @param {any} `val`\n     * @return {Object} Returns the instance for chaining.\n     * @api public\n     */\n  }, {\n    key: \"prime\",\n    value: function prime(key) {\n      for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        rest[_key2 - 1] = arguments[_key2];\n      }\n      if (isObject(key) || rest.length === 0 && Array.isArray(key)) {\n        return this.visit.apply(this, ['prime', key].concat(rest));\n      }\n      if (Array.isArray(key)) key = key.join('.');\n      if (!this.has(key)) {\n        this.set.apply(this, [key].concat(rest));\n      }\n      return this;\n    }\n\n    /**\n     * Set a default value to be used when `.get()` is called and the value is not defined\n     * on the cache. Returns a value from the defaults when only a key is passed.\n     *\n     * ```js\n     * app.set('foo', 'xxx');\n     * app.default('foo', 'one');\n     * app.default('bar', 'two');\n     * app.default('baz', 'three');\n     * app.set('baz', 'zzz');\n     *\n     * console.log(app.get('foo'));\n     * //=> 'xxx'\n     *\n     * console.log(app.get('bar'));\n     * //=> 'two'\n     *\n     * console.log(app.get('baz'));\n     * //=> 'zzz'\n     *\n     * console.log(app);\n     * // CacheBase {\n     * //   cache: { foo: 'xxx', bar: 'two', baz: 'zzz' },\n     * //   defaults: { foo: 'one', bar: 'two', baz: 'three' } }\n     * ```\n     * @name .default\n     * @param {String|Array} `key` The name of the property to set. Dot-notation may be used to set nested properties.\n     * @param {any} `value` (optional) The value to set on the defaults object.\n     * @return {Object} Returns the instance for chaining.\n     * @api public\n     */\n  }, {\n    key: \"default\",\n    value: function _default(key) {\n      this.defaults = this.defaults || {};\n      for (var _len3 = arguments.length, rest = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        rest[_key3 - 1] = arguments[_key3];\n      }\n      if (isObject(key) || rest.length === 0 && Array.isArray(key)) {\n        return this.visit.apply(this, ['default', key].concat(rest));\n      }\n      if (Array.isArray(key)) key = key.join('.');\n      if (!isString(key)) {\n        throw new TypeError('expected \"key\" to be a string, object or array');\n      }\n      if (rest.length === 0) {\n        return _get(this.defaults, key);\n      }\n      _set.apply(void 0, [this.defaults, key].concat(rest));\n      this.emit('default', key, rest);\n      return this;\n    }\n\n    /**\n     * Set an array of unique values on cache `key`.\n     *\n     * ```js\n     * app.union('a.b.c', 'foo');\n     * app.union('a.b.c', 'bar');\n     * app.union('a.b.c', ['bar', 'baz']);\n     * console.log(app.get('a'));\n     * //=> { b: { c: ['foo', 'bar', 'baz'] } }\n     * ```\n     * @name .union\n     * @param {String|Array} `key` The name of the property to union. Dot-notation may be used to set nested properties.\n     * @param {any} `value`\n     * @return {Object} Returns the instance for chaining.\n     * @api public\n     */\n  }, {\n    key: \"union\",\n    value: function union(key) {\n      if (Array.isArray(key)) key = key.join('.');\n      for (var _len4 = arguments.length, rest = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        rest[_key4 - 1] = arguments[_key4];\n      }\n      _union.apply(void 0, [this[this.prop], key].concat(rest));\n      this.emit.apply(this, ['union'].concat(rest));\n      return this;\n    }\n\n    /**\n     * Return true if the value of property `key` is not `undefined`.\n     *\n     * ```js\n     * app.set('foo', true);\n     * app.set('baz', null);\n     * app.set('bar', undefined);\n     *\n     * app.has('foo'); //=> true\n     * app.has('bar'); //=> true\n     * app.has('baz'); //=> false\n     * ```\n     * @name .has\n     * @param {String|Array} `key` The name of the property to check. Dot-notation may be used to set nested properties.\n     * @return {Boolean}\n     * @api public\n     */\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      if (Array.isArray(key)) key = key.join('.');\n      return typeof _get(this[this.prop], key) !== 'undefined';\n    }\n\n    /**\n     * Returns true if the specified property is an own (not inherited) property.\n     * Similar to [.has()](#has), but returns true if the key exists, even if the\n     * value is `undefined`.\n     *\n     * ```js\n     * app.set('a.b.c', 'd');\n     * app.set('x', false);\n     * app.set('y', null);\n     * app.set('z', undefined);\n     *\n     * app.hasOwn('a');      //=> true\n     * app.hasOwn('b');      //=> true\n     * app.hasOwn('c');      //=> true\n     * app.hasOwn('a.b.c');  //=> true\n     * app.hasOwn('x');      //=> true\n     * app.hasOwn('y');      //=> true\n     * app.hasOwn('z');      //=> true\n     * app.hasOwn('lslsls'); //=> false\n     * ```\n     * @name .hasOwn\n     * @param  {String} `key`\n     * @return {Boolean} Returns true if object `key` exists. Dot-notation may be used to set nested properties.\n     * @api public\n     */\n  }, {\n    key: \"hasOwn\",\n    value: function hasOwn(key) {\n      if (Array.isArray(key)) key = key.join('.');\n      return _hasOwn(this[this.prop], key);\n    }\n\n    /**\n     * Delete one or more properties from the instance.\n     *\n     * ```js\n     * // setup a listener to update a property with a default\n     * // value when it's deleted by the user\n     * app.on('del', key => app.set(key, app.default(key)));\n     *\n     * app.del(); // delete all properties on the cache\n     * // or\n     * app.del('foo');\n     * // or an array of keys\n     * app.del(['foo', 'bar']);\n     * ```\n     * @name .del\n     * @emits `del` with the `key` as the only argument.\n     * @param {string} `key` The name of the property to delete. Dot-notation may be used to delete nested properties. This method does not accept key as an array.\n     * @return {Object} Returns the instance for chaining.\n     * @api public\n     */\n  }, {\n    key: \"del\",\n    value: function del(key) {\n      if (!key) return this.clear();\n      _del(this[this.prop], key);\n      this.emit('del', key);\n      return this;\n    }\n\n    /**\n     * Reset the entire cache to an empty object. Note that this does not also clear the `defaults`\n     * object, since you can manually do `cache.defaults = {}` if you want to reset that object as well.\n     *\n     * ```js\n     * // clear \"defaults\" whenever the cache is cleared\n     * app.on('clear', key => (app.defaults = {}));\n     * app.clear();\n     * ```\n     * @name .clear\n     * @api public\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this[this.prop] = {};\n      this.emit('clear');\n      return this;\n    }\n\n    /**\n     * Visit (or map visit) the specified method (`key`) over the properties in the\n     * given object or array.\n     *\n     * @name .visit\n     * @param {String|Array} `key` The name of the method to visit.\n     * @param {Object|Array} `val` The object or array to iterate over.\n     * @return {Object} Returns the instance for chaining.\n     * @api public\n     */\n  }, {\n    key: \"visit\",\n    value: function visit(key) {\n      for (var _len5 = arguments.length, rest = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        rest[_key5 - 1] = arguments[_key5];\n      }\n      _visit.apply(void 0, [this, key].concat(rest));\n      return this;\n    }\n\n    /**\n     * Gets an array of names of all enumerable properties on the cache.\n     *\n     * ```js\n     * const app = new CacheBase();\n     * app.set('user', true);\n     * app.set('admin', false);\n     *\n     * console.log(app.keys);\n     * //=> ['user', 'admin']\n     * ```\n     * @name .keys\n     * @api public\n     */\n  }, {\n    key: \"keys\",\n    get: function get() {\n      return Object.keys(this[this.prop]);\n    }\n\n    /**\n     * Gets the length of [keys](#keys).\n     *\n     * ```js\n     * const app = new CacheBase();\n     * app.set('user', true);\n     * app.set('admin', false);\n     *\n     * console.log(app.size);\n     * //=> 2\n     * ```\n     * @name .size\n     * @api public\n     */\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.keys.length;\n    }\n  }]);\n  return CacheBase;\n}(Emitter);\n/**\n * Returns true if `value` is a non-empty string.\n */\nfunction isString(value) {\n  return typeof value === 'string' && value !== '';\n}\n\n/**\n * Returns true if `value` is an object\n */\n\nfunction isObject(value) {\n  return typeOf(value) === 'object';\n}\n\n/**\n * Expose `CacheBase`\n */\n\nmodule.exports = CacheBase;","map":{"version":3,"names":["_classCallCheck","require","_createClass","_assertThisInitialized","_inherits","_createSuper","typeOf","Emitter","visit","hasOwn","union","del","get","set","CacheBase","_Emitter","_super","prop","cache","_this","call","Reflect","defineProperty","value","key","_len","arguments","length","rest","Array","_key","isObject","isArray","apply","concat","join","emit","val","defaults","prime","_len2","_key2","has","_default","_len3","_key3","isString","TypeError","_len4","_key4","clear","_len5","_key5","Object","keys","module","exports"],"sources":["C:/Users/badsc/Documents/GitHub/trading-dashboard-local/node_modules/cache-base/index.js"],"sourcesContent":["'use strict';\n\nconst typeOf = require('kind-of');\nconst Emitter = require('@sellside/emitter');\nconst visit = require('collection-visit');\nconst hasOwn = require('has-own-deep');\nconst union = require('union-value');\nconst del = require('unset-value');\nconst get = require('get-value');\nconst set = require('set-value');\n\n/**\n * Create an instance of `CacheBase`.\n *\n * ```js\n * const app = new CacheBase();\n * ```\n * @param {String|Object} `prop` (optional) Property name to use for the cache, or the object to initialize with.\n * @param {Object} `cache` (optional) An object to initialize with.\n * @constructor\n * @api public\n */\n\nclass CacheBase extends Emitter {\n  constructor(prop, cache) {\n    super();\n\n    if (typeof prop !== 'string') {\n      cache = prop || cache;\n      prop = 'cache';\n    }\n\n    Reflect.defineProperty(this, 'prop', { value: prop });\n    this[this.prop] = {};\n\n    if (cache) {\n      this.set(cache);\n    }\n  }\n\n  /**\n   * Assign `value` to `key`. Also emits `set` with the key and value.\n   *\n   * ```js\n   * app.on('set', function(key, val) {\n   *   // do something when `set` is emitted\n   * });\n   *\n   * app.set('admin', true);\n   *\n   * // also takes an object or an array of objects\n   * app.set({ name: 'Brian' });\n   * app.set([{ foo: 'bar' }, { baz: 'quux' }]);\n   * console.log(app);\n   * //=> { name: 'Brian', foo: 'bar', baz: 'quux' }\n   * ```\n   * @name .set\n   * @emits `set` with `key` and `value` as arguments.\n   * @param {String|Array} `key` The name of the property to set. Dot-notation may be used to set nested properties.\n   * @param {any} `value`\n   * @return {Object} Returns the instance for chaining.\n   * @api public\n   */\n\n  set(key, ...rest) {\n    if (isObject(key) || (rest.length === 0 && Array.isArray(key))) {\n      return this.visit('set', key, ...rest);\n    }\n    if (Array.isArray(key)) key = key.join('.');\n    set(this[this.prop], key, ...rest);\n    this.emit('set', key, ...rest);\n    return this;\n  }\n\n  /**\n   * Return the value of `key`.\n   *\n   * ```js\n   * app.set('a.b.c', 'd');\n   * app.get('a.b');\n   * //=> { c: 'd' }\n   * ```\n   * @name .get\n   * @emits `get` with `key` and `value` as arguments.\n   * @param {String|Array} `key` The name of the property to get. Dot-notation may be used to set nested properties.\n   * @return {any} Returns the value of `key`\n   * @api public\n   */\n\n  get(key) {\n    if (Array.isArray(key)) key = key.join('.');\n    let val = get(this[this.prop], key);\n\n    if (typeof val === 'undefined' && this.defaults) {\n      val = get(this.defaults, key);\n    }\n\n    this.emit('get', key, val);\n    return val;\n  }\n\n  /**\n   * Create a property on the cache with the given `value` only if it doesn't\n   * already exist.\n   *\n   * ```js\n   * console.log(app.cache); //=> {}\n   * app.set('one', { foo: 'bar' });\n   * app.prime('one', { a: 'b' });\n   * app.prime('two', { c: 'd' });\n   * console.log(app.cache.one); //=> { foo: 'bar' }\n   * console.log(app.cache.two); //=> { c: 'd' }\n   * ```\n   * @name .prime\n   * @param {String} `key` Property name or object path notation.\n   * @param {any} `val`\n   * @return {Object} Returns the instance for chaining.\n   * @api public\n   */\n\n  prime(key, ...rest) {\n    if (isObject(key) || (rest.length === 0 && Array.isArray(key))) {\n      return this.visit('prime', key, ...rest);\n    }\n    if (Array.isArray(key)) key = key.join('.');\n    if (!this.has(key)) {\n      this.set(key, ...rest);\n    }\n    return this;\n  }\n\n  /**\n   * Set a default value to be used when `.get()` is called and the value is not defined\n   * on the cache. Returns a value from the defaults when only a key is passed.\n   *\n   * ```js\n   * app.set('foo', 'xxx');\n   * app.default('foo', 'one');\n   * app.default('bar', 'two');\n   * app.default('baz', 'three');\n   * app.set('baz', 'zzz');\n   *\n   * console.log(app.get('foo'));\n   * //=> 'xxx'\n   *\n   * console.log(app.get('bar'));\n   * //=> 'two'\n   *\n   * console.log(app.get('baz'));\n   * //=> 'zzz'\n   *\n   * console.log(app);\n   * // CacheBase {\n   * //   cache: { foo: 'xxx', bar: 'two', baz: 'zzz' },\n   * //   defaults: { foo: 'one', bar: 'two', baz: 'three' } }\n   * ```\n   * @name .default\n   * @param {String|Array} `key` The name of the property to set. Dot-notation may be used to set nested properties.\n   * @param {any} `value` (optional) The value to set on the defaults object.\n   * @return {Object} Returns the instance for chaining.\n   * @api public\n   */\n\n  default(key, ...rest) {\n    this.defaults = this.defaults || {};\n\n    if (isObject(key) || (rest.length === 0 && Array.isArray(key))) {\n      return this.visit('default', key, ...rest);\n    }\n\n    if (Array.isArray(key)) key = key.join('.');\n    if (!isString(key)) {\n      throw new TypeError('expected \"key\" to be a string, object or array');\n    }\n\n    if (rest.length === 0) {\n      return get(this.defaults, key);\n    }\n\n    set(this.defaults, key, ...rest);\n    this.emit('default', key, rest);\n    return this;\n  }\n\n  /**\n   * Set an array of unique values on cache `key`.\n   *\n   * ```js\n   * app.union('a.b.c', 'foo');\n   * app.union('a.b.c', 'bar');\n   * app.union('a.b.c', ['bar', 'baz']);\n   * console.log(app.get('a'));\n   * //=> { b: { c: ['foo', 'bar', 'baz'] } }\n   * ```\n   * @name .union\n   * @param {String|Array} `key` The name of the property to union. Dot-notation may be used to set nested properties.\n   * @param {any} `value`\n   * @return {Object} Returns the instance for chaining.\n   * @api public\n   */\n\n  union(key, ...rest) {\n    if (Array.isArray(key)) key = key.join('.');\n    union(this[this.prop], key, ...rest);\n    this.emit('union', ...rest);\n    return this;\n  }\n\n  /**\n   * Return true if the value of property `key` is not `undefined`.\n   *\n   * ```js\n   * app.set('foo', true);\n   * app.set('baz', null);\n   * app.set('bar', undefined);\n   *\n   * app.has('foo'); //=> true\n   * app.has('bar'); //=> true\n   * app.has('baz'); //=> false\n   * ```\n   * @name .has\n   * @param {String|Array} `key` The name of the property to check. Dot-notation may be used to set nested properties.\n   * @return {Boolean}\n   * @api public\n   */\n\n  has(key) {\n    if (Array.isArray(key)) key = key.join('.');\n    return typeof get(this[this.prop], key) !== 'undefined';\n  }\n\n  /**\n   * Returns true if the specified property is an own (not inherited) property.\n   * Similar to [.has()](#has), but returns true if the key exists, even if the\n   * value is `undefined`.\n   *\n   * ```js\n   * app.set('a.b.c', 'd');\n   * app.set('x', false);\n   * app.set('y', null);\n   * app.set('z', undefined);\n   *\n   * app.hasOwn('a');      //=> true\n   * app.hasOwn('b');      //=> true\n   * app.hasOwn('c');      //=> true\n   * app.hasOwn('a.b.c');  //=> true\n   * app.hasOwn('x');      //=> true\n   * app.hasOwn('y');      //=> true\n   * app.hasOwn('z');      //=> true\n   * app.hasOwn('lslsls'); //=> false\n   * ```\n   * @name .hasOwn\n   * @param  {String} `key`\n   * @return {Boolean} Returns true if object `key` exists. Dot-notation may be used to set nested properties.\n   * @api public\n   */\n\n  hasOwn(key) {\n    if (Array.isArray(key)) key = key.join('.');\n    return hasOwn(this[this.prop], key);\n  }\n\n  /**\n   * Delete one or more properties from the instance.\n   *\n   * ```js\n   * // setup a listener to update a property with a default\n   * // value when it's deleted by the user\n   * app.on('del', key => app.set(key, app.default(key)));\n   *\n   * app.del(); // delete all properties on the cache\n   * // or\n   * app.del('foo');\n   * // or an array of keys\n   * app.del(['foo', 'bar']);\n   * ```\n   * @name .del\n   * @emits `del` with the `key` as the only argument.\n   * @param {string} `key` The name of the property to delete. Dot-notation may be used to delete nested properties. This method does not accept key as an array.\n   * @return {Object} Returns the instance for chaining.\n   * @api public\n   */\n\n  del(key) {\n    if (!key) return this.clear();\n    del(this[this.prop], key);\n    this.emit('del', key);\n    return this;\n  }\n\n  /**\n   * Reset the entire cache to an empty object. Note that this does not also clear the `defaults`\n   * object, since you can manually do `cache.defaults = {}` if you want to reset that object as well.\n   *\n   * ```js\n   * // clear \"defaults\" whenever the cache is cleared\n   * app.on('clear', key => (app.defaults = {}));\n   * app.clear();\n   * ```\n   * @name .clear\n   * @api public\n   */\n\n  clear() {\n    this[this.prop] = {};\n    this.emit('clear');\n    return this;\n  }\n\n  /**\n   * Visit (or map visit) the specified method (`key`) over the properties in the\n   * given object or array.\n   *\n   * @name .visit\n   * @param {String|Array} `key` The name of the method to visit.\n   * @param {Object|Array} `val` The object or array to iterate over.\n   * @return {Object} Returns the instance for chaining.\n   * @api public\n   */\n\n  visit(key, ...rest) {\n    visit(this, key, ...rest);\n    return this;\n  }\n\n  /**\n   * Gets an array of names of all enumerable properties on the cache.\n   *\n   * ```js\n   * const app = new CacheBase();\n   * app.set('user', true);\n   * app.set('admin', false);\n   *\n   * console.log(app.keys);\n   * //=> ['user', 'admin']\n   * ```\n   * @name .keys\n   * @api public\n   */\n\n  get keys() {\n    return Object.keys(this[this.prop]);\n  }\n\n  /**\n   * Gets the length of [keys](#keys).\n   *\n   * ```js\n   * const app = new CacheBase();\n   * app.set('user', true);\n   * app.set('admin', false);\n   *\n   * console.log(app.size);\n   * //=> 2\n   * ```\n   * @name .size\n   * @api public\n   */\n\n  get size() {\n    return this.keys.length;\n  }\n}\n\n/**\n * Returns true if `value` is a non-empty string.\n */\n\nfunction isString(value) {\n  return typeof value === 'string' && value !== '';\n}\n\n/**\n * Returns true if `value` is an object\n */\n\nfunction isObject(value) {\n  return typeOf(value) === 'object';\n}\n\n/**\n * Expose `CacheBase`\n */\n\nmodule.exports = CacheBase;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}