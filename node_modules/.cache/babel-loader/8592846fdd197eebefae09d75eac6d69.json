{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n  }\n  return t;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, getUserAgentHeader, Platform, sendMessage } from \"./Utils\";\n/** @private */\nvar ServerSentEventsTransport = /** @class */function () {\n  function ServerSentEventsTransport(httpClient, accessTokenFactory, logger, logMessageContent, eventSourceConstructor, withCredentials, headers) {\n    this.httpClient = httpClient;\n    this.accessTokenFactory = accessTokenFactory;\n    this.logger = logger;\n    this.logMessageContent = logMessageContent;\n    this.withCredentials = withCredentials;\n    this.eventSourceConstructor = eventSourceConstructor;\n    this.headers = headers;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n  ServerSentEventsTransport.prototype.connect = function (url, transferFormat) {\n    return __awaiter(this, void 0, void 0, function () {\n      var token;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            Arg.isRequired(url, \"url\");\n            Arg.isRequired(transferFormat, \"transferFormat\");\n            Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n            this.logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\n            // set url before accessTokenFactory because this.url is only for send and we set the auth header instead of the query string for send\n            this.url = url;\n            if (!this.accessTokenFactory) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.accessTokenFactory()];\n          case 1:\n            token = _a.sent();\n            if (token) {\n              url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + (\"access_token=\" + encodeURIComponent(token));\n            }\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/, new Promise(function (resolve, reject) {\n              var opened = false;\n              if (transferFormat !== TransferFormat.Text) {\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\n                return;\n              }\n              var eventSource;\n              if (Platform.isBrowser || Platform.isWebWorker) {\n                eventSource = new _this.eventSourceConstructor(url, {\n                  withCredentials: _this.withCredentials\n                });\n              } else {\n                // Non-browser passes cookies via the dictionary\n                var cookies = _this.httpClient.getCookieString(url);\n                var headers = {};\n                headers.Cookie = cookies;\n                var _a = getUserAgentHeader(),\n                  name_1 = _a[0],\n                  value = _a[1];\n                headers[name_1] = value;\n                eventSource = new _this.eventSourceConstructor(url, {\n                  withCredentials: _this.withCredentials,\n                  headers: __assign({}, headers, _this.headers)\n                });\n              }\n              try {\n                eventSource.onmessage = function (e) {\n                  if (_this.onreceive) {\n                    try {\n                      _this.logger.log(LogLevel.Trace, \"(SSE transport) data received. \" + getDataDetail(e.data, _this.logMessageContent) + \".\");\n                      _this.onreceive(e.data);\n                    } catch (error) {\n                      _this.close(error);\n                      return;\n                    }\n                  }\n                };\n                eventSource.onerror = function (e) {\n                  var error = new Error(e.data || \"Error occurred\");\n                  if (opened) {\n                    _this.close(error);\n                  } else {\n                    reject(error);\n                  }\n                };\n                eventSource.onopen = function () {\n                  _this.logger.log(LogLevel.Information, \"SSE connected to \" + _this.url);\n                  _this.eventSource = eventSource;\n                  opened = true;\n                  resolve();\n                };\n              } catch (e) {\n                reject(e);\n                return;\n              }\n            })];\n        }\n      });\n    });\n  };\n  ServerSentEventsTransport.prototype.send = function (data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (!this.eventSource) {\n          return [2 /*return*/, Promise.reject(new Error(\"Cannot send until the transport is connected\"))];\n        }\n        return [2 /*return*/, sendMessage(this.logger, \"SSE\", this.httpClient, this.url, this.accessTokenFactory, data, this.logMessageContent, this.withCredentials, this.headers)];\n      });\n    });\n  };\n  ServerSentEventsTransport.prototype.stop = function () {\n    this.close();\n    return Promise.resolve();\n  };\n  ServerSentEventsTransport.prototype.close = function (e) {\n    if (this.eventSource) {\n      this.eventSource.close();\n      this.eventSource = undefined;\n      if (this.onclose) {\n        this.onclose(e);\n      }\n    }\n  };\n  return ServerSentEventsTransport;\n}();\nexport { ServerSentEventsTransport };","map":{"version":3,"names":["LogLevel","TransferFormat","Arg","getDataDetail","getUserAgentHeader","Platform","sendMessage","ServerSentEventsTransport","httpClient","accessTokenFactory","logger","logMessageContent","eventSourceConstructor","withCredentials","headers","onreceive","onclose","prototype","connect","url","transferFormat","isRequired","isIn","log","Trace","token","_a","sent","indexOf","encodeURIComponent","Promise","resolve","reject","opened","Text","Error","eventSource","isBrowser","isWebWorker","_this","cookies","getCookieString","Cookie","name_1","value","__assign","onmessage","e","data","error","close","onerror","onopen","Information","send","stop","undefined"],"sources":["../../src/ServerSentEventsTransport.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { EventSourceConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform, sendMessage } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly withCredentials: boolean;\r\n    private readonly eventSourceConstructor: EventSourceConstructor;\r\n    private eventSource?: EventSource;\r\n    private url?: string;\r\n    private headers: MessageHeaders;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, eventSourceConstructor: EventSourceConstructor, withCredentials: boolean, headers: MessageHeaders) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logger = logger;\r\n        this.logMessageContent = logMessageContent;\r\n        this.withCredentials = withCredentials;\r\n        this.eventSourceConstructor = eventSourceConstructor;\r\n        this.headers = headers;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n\r\n        // set url before accessTokenFactory because this.url is only for send and we set the auth header instead of the query string for send\r\n        this.url = url;\r\n\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n\r\n            let eventSource: EventSource;\r\n            if (Platform.isBrowser || Platform.isWebWorker) {\r\n                eventSource = new this.eventSourceConstructor(url, { withCredentials: this.withCredentials });\r\n            } else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const cookies = this.httpClient.getCookieString(url);\r\n                const headers: MessageHeaders = {};\r\n                headers.Cookie = cookies;\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n\r\n                eventSource = new this.eventSourceConstructor(url, { withCredentials: this.withCredentials, headers: { ...headers, ...this.headers} } as EventSourceInit);\r\n            }\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this.logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this.logMessageContent)}.`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            this.close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                eventSource.onerror = (e: MessageEvent) => {\r\n                    const error = new Error(e.data || \"Error occurred\");\r\n                    if (opened) {\r\n                        this.close(error);\r\n                    } else {\r\n                        reject(error);\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this.logger.log(LogLevel.Information, `SSE connected to ${this.url}`);\r\n                    this.eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            } catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"SSE\", this.httpClient, this.url!, this.accessTokenFactory, data, this.logMessageContent, this.withCredentials, this.headers);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this.close();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private close(e?: Error) {\r\n        if (this.eventSource) {\r\n            this.eventSource.close();\r\n            this.eventSource = undefined;\r\n\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}