{"ast":null,"code":"var debug = require('debug')('log4js:tcp');\nvar net = require('net');\nfunction appender(config, layout) {\n  var canWrite = false;\n  var buffer = [];\n  var socket;\n  var shutdownAttempts = 3;\n  var endMsg = '__LOG4JS__';\n  function write(loggingEvent) {\n    debug('Writing log event to socket');\n    canWrite = socket.write(\"\".concat(layout(loggingEvent)).concat(endMsg), 'utf8');\n  }\n  function emptyBuffer() {\n    var evt;\n    debug('emptying buffer');\n    while (evt = buffer.shift()) {\n      write(evt);\n    }\n  }\n  function createSocket() {\n    debug(\"appender creating socket to \".concat(config.host || 'localhost', \":\").concat(config.port || 5000));\n    endMsg = \"\".concat(config.endMsg || '__LOG4JS__');\n    socket = net.createConnection(config.port || 5000, config.host || 'localhost');\n    socket.on('connect', function () {\n      debug('socket connected');\n      emptyBuffer();\n      canWrite = true;\n    });\n    socket.on('drain', function () {\n      debug('drain event received, emptying buffer');\n      canWrite = true;\n      emptyBuffer();\n    });\n    socket.on('timeout', socket.end.bind(socket));\n    socket.on('error', function (e) {\n      debug('connection error', e);\n      canWrite = false;\n      emptyBuffer();\n    });\n    socket.on('close', createSocket);\n  }\n  createSocket();\n  function log(loggingEvent) {\n    if (canWrite) {\n      write(loggingEvent);\n    } else {\n      debug('buffering log event because it cannot write at the moment');\n      buffer.push(loggingEvent);\n    }\n  }\n  log.shutdown = function (cb) {\n    debug('shutdown called');\n    if (buffer.length && shutdownAttempts) {\n      debug('buffer has items, waiting 100ms to empty');\n      shutdownAttempts -= 1;\n      setTimeout(function () {\n        log.shutdown(cb);\n      }, 100);\n    } else {\n      socket.removeAllListeners('close');\n      socket.end(cb);\n    }\n  };\n  return log;\n}\nfunction configure(config, layouts) {\n  debug(\"configure with config = \".concat(config));\n  var layout = function layout(loggingEvent) {\n    return loggingEvent.serialise();\n  };\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n  return appender(config, layout);\n}\nmodule.exports.configure = configure;","map":{"version":3,"names":["debug","require","net","appender","config","layout","canWrite","buffer","socket","shutdownAttempts","endMsg","write","loggingEvent","concat","emptyBuffer","evt","shift","createSocket","host","port","createConnection","on","end","bind","e","log","push","shutdown","cb","length","setTimeout","removeAllListeners","configure","layouts","serialise","type","module","exports"],"sources":["C:/Users/badsc/Documents/GitHub/trading-dashboard-local/node_modules/log4js/lib/appenders/tcp.js"],"sourcesContent":["const debug = require('debug')('log4js:tcp');\nconst net = require('net');\n\nfunction appender(config, layout) {\n  let canWrite = false;\n  const buffer = [];\n  let socket;\n  let shutdownAttempts = 3;\n  let endMsg = '__LOG4JS__';\n\n  function write(loggingEvent) {\n    debug('Writing log event to socket');\n    canWrite = socket.write(`${layout(loggingEvent)}${endMsg}`, 'utf8');\n  }\n\n  function emptyBuffer() {\n    let evt;\n    debug('emptying buffer');\n    while ((evt = buffer.shift())) {\n      write(evt);\n    }\n  }\n\n  function createSocket() {\n    debug(\n      `appender creating socket to ${config.host || 'localhost'}:${\n        config.port || 5000\n      }`\n    );\n    endMsg = `${config.endMsg || '__LOG4JS__'}`;\n    socket = net.createConnection(\n      config.port || 5000,\n      config.host || 'localhost'\n    );\n    socket.on('connect', () => {\n      debug('socket connected');\n      emptyBuffer();\n      canWrite = true;\n    });\n    socket.on('drain', () => {\n      debug('drain event received, emptying buffer');\n      canWrite = true;\n      emptyBuffer();\n    });\n    socket.on('timeout', socket.end.bind(socket));\n    socket.on('error', (e) => {\n      debug('connection error', e);\n      canWrite = false;\n      emptyBuffer();\n    });\n    socket.on('close', createSocket);\n  }\n\n  createSocket();\n\n  function log(loggingEvent) {\n    if (canWrite) {\n      write(loggingEvent);\n    } else {\n      debug('buffering log event because it cannot write at the moment');\n      buffer.push(loggingEvent);\n    }\n  }\n\n  log.shutdown = function (cb) {\n    debug('shutdown called');\n    if (buffer.length && shutdownAttempts) {\n      debug('buffer has items, waiting 100ms to empty');\n      shutdownAttempts -= 1;\n      setTimeout(() => {\n        log.shutdown(cb);\n      }, 100);\n    } else {\n      socket.removeAllListeners('close');\n      socket.end(cb);\n    }\n  };\n  return log;\n}\n\nfunction configure(config, layouts) {\n  debug(`configure with config = ${config}`);\n  let layout = function (loggingEvent) {\n    return loggingEvent.serialise();\n  };\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n  return appender(config, layout);\n}\n\nmodule.exports.configure = configure;\n"],"mappings":"AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC;AAC5C,IAAMC,GAAG,GAAGD,OAAO,CAAC,KAAK,CAAC;AAE1B,SAASE,QAAQA,CAACC,MAAM,EAAEC,MAAM,EAAE;EAChC,IAAIC,QAAQ,GAAG,KAAK;EACpB,IAAMC,MAAM,GAAG,EAAE;EACjB,IAAIC,MAAM;EACV,IAAIC,gBAAgB,GAAG,CAAC;EACxB,IAAIC,MAAM,GAAG,YAAY;EAEzB,SAASC,KAAKA,CAACC,YAAY,EAAE;IAC3BZ,KAAK,CAAC,6BAA6B,CAAC;IACpCM,QAAQ,GAAGE,MAAM,CAACG,KAAK,IAAAE,MAAA,CAAIR,MAAM,CAACO,YAAY,CAAC,EAAAC,MAAA,CAAGH,MAAM,GAAI,MAAM,CAAC;EACrE;EAEA,SAASI,WAAWA,CAAA,EAAG;IACrB,IAAIC,GAAG;IACPf,KAAK,CAAC,iBAAiB,CAAC;IACxB,OAAQe,GAAG,GAAGR,MAAM,CAACS,KAAK,CAAC,CAAC,EAAG;MAC7BL,KAAK,CAACI,GAAG,CAAC;IACZ;EACF;EAEA,SAASE,YAAYA,CAAA,EAAG;IACtBjB,KAAK,gCAAAa,MAAA,CAC4BT,MAAM,CAACc,IAAI,IAAI,WAAW,OAAAL,MAAA,CACvDT,MAAM,CAACe,IAAI,IAAI,IAAI,CAEvB,CAAC;IACDT,MAAM,MAAAG,MAAA,CAAMT,MAAM,CAACM,MAAM,IAAI,YAAY,CAAE;IAC3CF,MAAM,GAAGN,GAAG,CAACkB,gBAAgB,CAC3BhB,MAAM,CAACe,IAAI,IAAI,IAAI,EACnBf,MAAM,CAACc,IAAI,IAAI,WACjB,CAAC;IACDV,MAAM,CAACa,EAAE,CAAC,SAAS,EAAE,YAAM;MACzBrB,KAAK,CAAC,kBAAkB,CAAC;MACzBc,WAAW,CAAC,CAAC;MACbR,QAAQ,GAAG,IAAI;IACjB,CAAC,CAAC;IACFE,MAAM,CAACa,EAAE,CAAC,OAAO,EAAE,YAAM;MACvBrB,KAAK,CAAC,uCAAuC,CAAC;MAC9CM,QAAQ,GAAG,IAAI;MACfQ,WAAW,CAAC,CAAC;IACf,CAAC,CAAC;IACFN,MAAM,CAACa,EAAE,CAAC,SAAS,EAAEb,MAAM,CAACc,GAAG,CAACC,IAAI,CAACf,MAAM,CAAC,CAAC;IAC7CA,MAAM,CAACa,EAAE,CAAC,OAAO,EAAE,UAACG,CAAC,EAAK;MACxBxB,KAAK,CAAC,kBAAkB,EAAEwB,CAAC,CAAC;MAC5BlB,QAAQ,GAAG,KAAK;MAChBQ,WAAW,CAAC,CAAC;IACf,CAAC,CAAC;IACFN,MAAM,CAACa,EAAE,CAAC,OAAO,EAAEJ,YAAY,CAAC;EAClC;EAEAA,YAAY,CAAC,CAAC;EAEd,SAASQ,GAAGA,CAACb,YAAY,EAAE;IACzB,IAAIN,QAAQ,EAAE;MACZK,KAAK,CAACC,YAAY,CAAC;IACrB,CAAC,MAAM;MACLZ,KAAK,CAAC,2DAA2D,CAAC;MAClEO,MAAM,CAACmB,IAAI,CAACd,YAAY,CAAC;IAC3B;EACF;EAEAa,GAAG,CAACE,QAAQ,GAAG,UAAUC,EAAE,EAAE;IAC3B5B,KAAK,CAAC,iBAAiB,CAAC;IACxB,IAAIO,MAAM,CAACsB,MAAM,IAAIpB,gBAAgB,EAAE;MACrCT,KAAK,CAAC,0CAA0C,CAAC;MACjDS,gBAAgB,IAAI,CAAC;MACrBqB,UAAU,CAAC,YAAM;QACfL,GAAG,CAACE,QAAQ,CAACC,EAAE,CAAC;MAClB,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,MAAM;MACLpB,MAAM,CAACuB,kBAAkB,CAAC,OAAO,CAAC;MAClCvB,MAAM,CAACc,GAAG,CAACM,EAAE,CAAC;IAChB;EACF,CAAC;EACD,OAAOH,GAAG;AACZ;AAEA,SAASO,SAASA,CAAC5B,MAAM,EAAE6B,OAAO,EAAE;EAClCjC,KAAK,4BAAAa,MAAA,CAA4BT,MAAM,CAAE,CAAC;EAC1C,IAAIC,MAAM,GAAG,SAAAA,OAAUO,YAAY,EAAE;IACnC,OAAOA,YAAY,CAACsB,SAAS,CAAC,CAAC;EACjC,CAAC;EACD,IAAI9B,MAAM,CAACC,MAAM,EAAE;IACjBA,MAAM,GAAG4B,OAAO,CAAC5B,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC8B,IAAI,EAAE/B,MAAM,CAACC,MAAM,CAAC;EAC5D;EACA,OAAOF,QAAQ,CAACC,MAAM,EAAEC,MAAM,CAAC;AACjC;AAEA+B,MAAM,CAACC,OAAO,CAACL,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script"}