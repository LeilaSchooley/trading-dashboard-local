{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n  }\n  return t;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\n/** @private */\nvar WebSocketTransport = /** @class */function () {\n  function WebSocketTransport(httpClient, accessTokenFactory, logger, logMessageContent, webSocketConstructor, headers) {\n    this.logger = logger;\n    this.accessTokenFactory = accessTokenFactory;\n    this.logMessageContent = logMessageContent;\n    this.webSocketConstructor = webSocketConstructor;\n    this.httpClient = httpClient;\n    this.onreceive = null;\n    this.onclose = null;\n    this.headers = headers;\n  }\n  WebSocketTransport.prototype.connect = function (url, transferFormat) {\n    return __awaiter(this, void 0, void 0, function () {\n      var token;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            Arg.isRequired(url, \"url\");\n            Arg.isRequired(transferFormat, \"transferFormat\");\n            Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n            this.logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\n            if (!this.accessTokenFactory) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.accessTokenFactory()];\n          case 1:\n            token = _a.sent();\n            if (token) {\n              url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + (\"access_token=\" + encodeURIComponent(token));\n            }\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/, new Promise(function (resolve, reject) {\n              url = url.replace(/^http/, \"ws\");\n              var webSocket;\n              var cookies = _this.httpClient.getCookieString(url);\n              var opened = false;\n              if (Platform.isNode) {\n                var headers = {};\n                var _a = getUserAgentHeader(),\n                  name_1 = _a[0],\n                  value = _a[1];\n                headers[name_1] = value;\n                if (cookies) {\n                  headers[\"Cookie\"] = \"\" + cookies;\n                }\n                // Only pass headers when in non-browser environments\n                webSocket = new _this.webSocketConstructor(url, undefined, {\n                  headers: __assign({}, headers, _this.headers)\n                });\n              }\n              if (!webSocket) {\n                // Chrome is not happy with passing 'undefined' as protocol\n                webSocket = new _this.webSocketConstructor(url);\n              }\n              if (transferFormat === TransferFormat.Binary) {\n                webSocket.binaryType = \"arraybuffer\";\n              }\n              // tslint:disable-next-line:variable-name\n              webSocket.onopen = function (_event) {\n                _this.logger.log(LogLevel.Information, \"WebSocket connected to \" + url + \".\");\n                _this.webSocket = webSocket;\n                opened = true;\n                resolve();\n              };\n              webSocket.onerror = function (event) {\n                var error = null;\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\n                  error = event.error;\n                } else {\n                  error = new Error(\"There was an error with the transport.\");\n                }\n                reject(error);\n              };\n              webSocket.onmessage = function (message) {\n                _this.logger.log(LogLevel.Trace, \"(WebSockets transport) data received. \" + getDataDetail(message.data, _this.logMessageContent) + \".\");\n                if (_this.onreceive) {\n                  try {\n                    _this.onreceive(message.data);\n                  } catch (error) {\n                    _this.close(error);\n                    return;\n                  }\n                }\n              };\n              webSocket.onclose = function (event) {\n                // Don't call close handler if connection was never established\n                // We'll reject the connect call instead\n                if (opened) {\n                  _this.close(event);\n                } else {\n                  var error = null;\n                  // ErrorEvent is a browser only type we need to check if the type exists before using it\n                  if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\n                    error = event.error;\n                  } else {\n                    error = new Error(\"There was an error with the transport.\");\n                  }\n                  reject(error);\n                }\n              };\n            })];\n        }\n      });\n    });\n  };\n  WebSocketTransport.prototype.send = function (data) {\n    if (this.webSocket && this.webSocket.readyState === this.webSocketConstructor.OPEN) {\n      this.logger.log(LogLevel.Trace, \"(WebSockets transport) sending data. \" + getDataDetail(data, this.logMessageContent) + \".\");\n      this.webSocket.send(data);\n      return Promise.resolve();\n    }\n    return Promise.reject(\"WebSocket is not in the OPEN state\");\n  };\n  WebSocketTransport.prototype.stop = function () {\n    if (this.webSocket) {\n      // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\n      // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\n      this.close(undefined);\n    }\n    return Promise.resolve();\n  };\n  WebSocketTransport.prototype.close = function (event) {\n    // webSocket will be null if the transport did not start successfully\n    if (this.webSocket) {\n      // Clear websocket handlers because we are considering the socket closed now\n      this.webSocket.onclose = function () {};\n      this.webSocket.onmessage = function () {};\n      this.webSocket.onerror = function () {};\n      this.webSocket.close();\n      this.webSocket = undefined;\n    }\n    this.logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\n    if (this.onclose) {\n      if (this.isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\n        this.onclose(new Error(\"WebSocket closed with status code: \" + event.code + \" (\" + event.reason + \").\"));\n      } else if (event instanceof Error) {\n        this.onclose(event);\n      } else {\n        this.onclose();\n      }\n    }\n  };\n  WebSocketTransport.prototype.isCloseEvent = function (event) {\n    return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\n  };\n  return WebSocketTransport;\n}();\nexport { WebSocketTransport };","map":{"version":3,"names":["LogLevel","TransferFormat","Arg","getDataDetail","getUserAgentHeader","Platform","WebSocketTransport","httpClient","accessTokenFactory","logger","logMessageContent","webSocketConstructor","headers","onreceive","onclose","prototype","connect","url","transferFormat","isRequired","isIn","log","Trace","token","_a","sent","indexOf","encodeURIComponent","Promise","resolve","reject","replace","webSocket","cookies","_this","getCookieString","opened","isNode","name_1","value","undefined","__assign","Binary","binaryType","onopen","_event","Information","onerror","event","error","ErrorEvent","Error","onmessage","message","data","close","send","readyState","OPEN","stop","isCloseEvent","wasClean","code","reason"],"sources":["../../src/WebSocketTransport.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { WebSocketConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly logger: ILogger;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly webSocketConstructor: WebSocketConstructor;\r\n    private readonly httpClient: HttpClient;\r\n    private webSocket?: WebSocket;\r\n    private headers: MessageHeaders;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, webSocketConstructor: WebSocketConstructor, headers: MessageHeaders) {\r\n        this.logger = logger;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logMessageContent = logMessageContent;\r\n        this.webSocketConstructor = webSocketConstructor;\r\n        this.httpClient = httpClient;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n        this.headers = headers;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket: WebSocket | undefined;\r\n            const cookies = this.httpClient.getCookieString(url);\r\n            let opened = false;\r\n\r\n            if (Platform.isNode) {\r\n                const headers = {};\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n\r\n                if (cookies) {\r\n                    headers[`Cookie`] = `${cookies}`;\r\n                }\r\n\r\n                // Only pass headers when in non-browser environments\r\n                webSocket = new this.webSocketConstructor(url, undefined, {\r\n                    headers: { ...headers, ...this.headers },\r\n                });\r\n            }\r\n\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this.webSocketConstructor(url);\r\n            }\r\n\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            // tslint:disable-next-line:variable-name\r\n            webSocket.onopen = (_event: Event) => {\r\n                this.logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this.webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: Event) => {\r\n                let error: any = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                } else {\r\n                    error = new Error(\"There was an error with the transport.\");\r\n                }\r\n\r\n                reject(error);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this.logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this.logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    try {\r\n                        this.onreceive(message.data);\r\n                    } catch (error) {\r\n                        this.close(error);\r\n                        return;\r\n                    }\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this.close(event);\r\n                } else {\r\n                    let error: any = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    } else {\r\n                        error = new Error(\"There was an error with the transport.\");\r\n                    }\r\n\r\n                    reject(error);\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this.webSocket && this.webSocket.readyState === this.webSocketConstructor.OPEN) {\r\n            this.logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this.logMessageContent)}.`);\r\n            this.webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this.webSocket) {\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this.close(undefined);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private close(event?: CloseEvent | Error): void {\r\n        // webSocket will be null if the transport did not start successfully\r\n        if (this.webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this.webSocket.onclose = () => {};\r\n            this.webSocket.onmessage = () => {};\r\n            this.webSocket.onerror = () => {};\r\n            this.webSocket.close();\r\n            this.webSocket = undefined;\r\n        }\r\n\r\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (this.isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason}).`));\r\n            } else if (event instanceof Error) {\r\n                this.onclose(event);\r\n            } else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n\r\n    private isCloseEvent(event?: any): event is CloseEvent {\r\n        return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}