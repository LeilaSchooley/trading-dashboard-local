{"ast":null,"code":"/*! (c) 2020 Andrea Giammarchi */\n\nvar $parse = JSON.parse,\n  $stringify = JSON.stringify;\nvar keys = Object.keys;\nvar Primitive = String; // it could be Number\nvar primitive = 'string'; // it could be 'number'\n\nvar ignore = {};\nvar object = 'object';\nvar noop = function noop(_, value) {\n  return value;\n};\nvar primitives = function primitives(value) {\n  return value instanceof Primitive ? Primitive(value) : value;\n};\nvar Primitives = function Primitives(_, value) {\n  return typeof value === primitive ? new Primitive(value) : value;\n};\nvar revive = function revive(input, parsed, output, $) {\n  var lazy = [];\n  for (var ke = keys(output), length = ke.length, y = 0; y < length; y++) {\n    var k = ke[y];\n    var value = output[k];\n    if (value instanceof Primitive) {\n      var tmp = input[value];\n      if (typeof tmp === object && !parsed.has(tmp)) {\n        parsed.add(tmp);\n        output[k] = ignore;\n        lazy.push({\n          k: k,\n          a: [input, parsed, tmp, $]\n        });\n      } else output[k] = $.call(output, k, tmp);\n    } else if (output[k] !== ignore) output[k] = $.call(output, k, value);\n  }\n  for (var _length = lazy.length, i = 0; i < _length; i++) {\n    var _lazy$i = lazy[i],\n      _k = _lazy$i.k,\n      a = _lazy$i.a;\n    output[_k] = $.call(output, _k, revive.apply(null, a));\n  }\n  return output;\n};\nvar set = function set(known, input, value) {\n  var index = Primitive(input.push(value) - 1);\n  known.set(value, index);\n  return index;\n};\nexport var parse = function parse(text, reviver) {\n  var input = $parse(text, Primitives).map(primitives);\n  var value = input[0];\n  var $ = reviver || noop;\n  var tmp = typeof value === object && value ? revive(input, new Set(), value, $) : value;\n  return $.call({\n    '': tmp\n  }, '', tmp);\n};\nexport var stringify = function stringify(value, replacer, space) {\n  var $ = replacer && typeof replacer === object ? function (k, v) {\n    return k === '' || -1 < replacer.indexOf(k) ? v : void 0;\n  } : replacer || noop;\n  var known = new Map();\n  var input = [];\n  var output = [];\n  var i = +set(known, input, $.call({\n    '': value\n  }, '', value));\n  var firstRun = !i;\n  while (i < input.length) {\n    firstRun = true;\n    output[i] = $stringify(input[i++], replace, space);\n  }\n  return '[' + output.join(',') + ']';\n  function replace(key, value) {\n    if (firstRun) {\n      firstRun = !firstRun;\n      return value;\n    }\n    var after = $.call(this, key, value);\n    switch (typeof after) {\n      case object:\n        if (after === null) return after;\n      case primitive:\n        return known.get(after) || set(known, input, after);\n    }\n    return after;\n  }\n};\nexport var toJSON = function toJSON(any) {\n  return $parse(stringify(any));\n};\nexport var fromJSON = function fromJSON(any) {\n  return parse($stringify(any));\n};","map":{"version":3,"names":["$parse","JSON","parse","$stringify","stringify","keys","Object","Primitive","String","primitive","ignore","object","noop","_","value","primitives","Primitives","revive","input","parsed","output","$","lazy","ke","length","y","k","tmp","has","add","push","a","call","i","_lazy$i","apply","set","known","index","text","reviver","map","Set","replacer","space","v","indexOf","Map","firstRun","replace","join","key","after","get","toJSON","any","fromJSON"],"sources":["C:/Users/badsc/Documents/GitHub/trading-dashboard-local/node_modules/log4js/node_modules/flatted/esm/index.js"],"sourcesContent":["/*! (c) 2020 Andrea Giammarchi */\n\nconst {parse: $parse, stringify: $stringify} = JSON;\nconst {keys} = Object;\n\nconst Primitive = String;   // it could be Number\nconst primitive = 'string'; // it could be 'number'\n\nconst ignore = {};\nconst object = 'object';\n\nconst noop = (_, value) => value;\n\nconst primitives = value => (\n  value instanceof Primitive ? Primitive(value) : value\n);\n\nconst Primitives = (_, value) => (\n  typeof value === primitive ? new Primitive(value) : value\n);\n\nconst revive = (input, parsed, output, $) => {\n  const lazy = [];\n  for (let ke = keys(output), {length} = ke, y = 0; y < length; y++) {\n    const k = ke[y];\n    const value = output[k];\n    if (value instanceof Primitive) {\n      const tmp = input[value];\n      if (typeof tmp === object && !parsed.has(tmp)) {\n        parsed.add(tmp);\n        output[k] = ignore;\n        lazy.push({k, a: [input, parsed, tmp, $]});\n      }\n      else\n        output[k] = $.call(output, k, tmp);\n    }\n    else if (output[k] !== ignore)\n      output[k] = $.call(output, k, value);\n  }\n  for (let {length} = lazy, i = 0; i < length; i++) {\n    const {k, a} = lazy[i];\n    output[k] = $.call(output, k, revive.apply(null, a));\n  }\n  return output;\n};\n\nconst set = (known, input, value) => {\n  const index = Primitive(input.push(value) - 1);\n  known.set(value, index);\n  return index;\n};\n\nexport const parse = (text, reviver) => {\n  const input = $parse(text, Primitives).map(primitives);\n  const value = input[0];\n  const $ = reviver || noop;\n  const tmp = typeof value === object && value ?\n              revive(input, new Set, value, $) :\n              value;\n  return $.call({'': tmp}, '', tmp);\n};\n\nexport const stringify = (value, replacer, space) => {\n  const $ = replacer && typeof replacer === object ?\n            (k, v) => (k === '' || -1 < replacer.indexOf(k) ? v : void 0) :\n            (replacer || noop);\n  const known = new Map;\n  const input = [];\n  const output = [];\n  let i = +set(known, input, $.call({'': value}, '', value));\n  let firstRun = !i;\n  while (i < input.length) {\n    firstRun = true;\n    output[i] = $stringify(input[i++], replace, space);\n  }\n  return '[' + output.join(',') + ']';\n  function replace(key, value) {\n    if (firstRun) {\n      firstRun = !firstRun;\n      return value;\n    }\n    const after = $.call(this, key, value);\n    switch (typeof after) {\n      case object:\n        if (after === null) return after;\n      case primitive:\n        return known.get(after) || set(known, input, after);\n    }\n    return after;\n  }\n};\n\nexport const toJSON = any => $parse(stringify(any));\nexport const fromJSON = any => parse($stringify(any));\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}