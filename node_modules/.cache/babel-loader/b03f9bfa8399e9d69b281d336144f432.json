{"ast":null,"code":"'use strict';\n\n/**\n * Initialize a new `Emitter`.\n *\n * ```js\n * const Emitter = require('emitter');\n * // as an `Emitter` instance\n * const emitter = new Emitter;\n * emitter.emit('something');\n * // or inherit\n * class MyEmitter extends Emitter {}\n * ```\n * @name Emitter\n * @api public\n */\nclass Emitter {\n  constructor(obj) {\n    if (obj) return mixin(obj);\n  }\n\n  /**\n   * Mixin methods from Emitter.\n   *\n   * ```js\n   * const Emitter = require('emitter');\n   * const obj = {};\n   * Emitter.mixin(obj);\n   * obj.on('status', console.log);\n   * obj.emit('status', 'I emit!');\n   * ```\n   * @name Emitter#mixin\n   * @param {Object} `obj`\n   * @return {Object}\n   * @api public\n   */\n\n  static mixin(obj) {\n    return new Emitter(obj);\n  }\n\n  /**\n   * Return the array of registered listeners for `event`.\n   *\n   * ```js\n   * // all listeners for event \"status\"\n   * console.log(emitter.listeners('status'));\n   * // all listeners\n   * console.log(emitter.listeners());\n   * ```\n   * @name .listeners\n   * @param {String} `event`\n   * @return {Array}\n   * @api public\n   */\n\n  listeners(event) {\n    if (!this._listeners) define(this, '_listeners', {});\n    if (!this._only) define(this, '_only', {});\n    if (!event) return this._listeners;\n    return this._listeners['$' + event] || (this._listeners['$' + event] = []);\n  }\n\n  /**\n   * Listen on the given `event` with `fn`.\n   *\n   * ```js\n   * emitter.on('foo', () => 'do stuff');\n   * ```\n   * @name .on\n   * @param {String} `event`\n   * @param {Function} `fn`\n   * @return {Emitter}\n   * @api public\n   */\n\n  on(event, fn) {\n    if (this._only && this._only[event]) {\n      return this.only(event, fn);\n    }\n    this.listeners(event).push(fn);\n    return this;\n  }\n\n  /**\n   * Adds an `event` listener that will be invoked a single\n   * time then automatically removed.\n   *\n   * ```js\n   * emitter.only('once', () => 'do stuff');\n   * ```\n   * @name .once\n   * @param {String} `event`\n   * @param {Function} `fn`\n   * @return {Emitter}\n   * @api public\n   */\n\n  once(event, fn) {\n    const on = function () {\n      this.off(event, on);\n      fn.apply(this, arguments);\n    };\n    on.fn = fn;\n    this.on(event, on);\n    return this;\n  }\n\n  /**\n   * Ensures that listeners for `event` are only **_registered_** once\n   * and are disabled correctly when specified. This is different from\n   * `.once`, which only **emits** once.\n   *\n   * ```js\n   * emitter.only('foo', () => 'do stuff');\n   * ```\n   * @name .only\n   * @param {String} `event`\n   * @param {Object} `options`\n   * @param {Function} `fn`\n   * @return {Emitter}\n   * @api public\n   */\n\n  only(event, options, fn) {\n    this.listeners();\n    if (typeof options === 'function') {\n      fn = options;\n      options = null;\n    }\n    if (options && options.first === true) {\n      define(this, '_first', true);\n    }\n    if (!fn || !event || !this._only[event]) {\n      this.off(event);\n      if (!fn) return this;\n    }\n    const existing = this._only[event];\n    if (existing) {\n      if (this._first === true) return this;\n      this.off(event, existing);\n    }\n    this._only[event] = fn;\n    this.listeners(event).push(fn);\n    return this;\n  }\n\n  /**\n   * Remove the given listener for `event`, or remove all\n   * registered listeners if `event` is undefined.\n   *\n   * ```js\n   * emitter.off();\n   * emitter.off('foo');\n   * emitter.off('foo', fn);\n   * ```\n   * @name .off\n   * @param {String} `event`\n   * @param {Function} `fn`\n   * @return {Emitter}\n   * @api public\n   */\n\n  off(event, fn) {\n    this.listeners();\n\n    // remove all listeners\n    if (!event) {\n      this._listeners = {};\n      this._only = {};\n      return this;\n    }\n\n    // remove all listeners for \"event\"\n    if (!fn) {\n      this._listeners['$' + event] = [];\n      this._only['$' + event] = [];\n      return this;\n    }\n\n    // remove all instances of \"fn\" from \"event\"\n    removeListeners(fn, this.listeners(event));\n    return this;\n  }\n\n  /**\n   * Emit `event` with the given args.\n   *\n   * ```js\n   * emitter.emit('foo', 'bar');\n   * ```\n   * @name .emit\n   * @param {String} `event`\n   * @param {Mixed} ...\n   * @return {Emitter}\n   */\n\n  emit(event) {\n    const listeners = this.listeners(event).slice();\n    const args = [].slice.call(arguments, 1);\n    for (const fn of listeners) {\n      fn.apply(this, args);\n    }\n    return this;\n  }\n\n  /**\n   * Returns true if the emitter has registered listeners for `event`.\n   *\n   * ```js\n   * emitter.on('foo', 'do stuff');\n   * console.log(emitter.has('foo')); // true\n   * console.log(emitter.has('bar')); // false\n   * ```\n   * @name .has\n   * @param {String} `event`\n   * @return {Boolean}\n   * @api public\n   */\n\n  has(event) {\n    return this.listeners(event).length > 0;\n  }\n}\n\n/**\n * Expose common aliases for `.has`, `.on` and `.off`\n */\n\nEmitter.prototype.hasListeners = Emitter.prototype.has;\nEmitter.prototype.addListener = Emitter.prototype.addEventListener = Emitter.prototype.on;\nEmitter.prototype.removeListener = Emitter.prototype.removeListeners = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = Emitter.prototype.off;\n\n/**\n * Remove all instances of the given `fn` from listeners.\n */\n\nfunction removeListeners(fn, listeners) {\n  for (let i = 0; i < listeners.length; i++) {\n    const listener = listeners[i];\n    if (listener === fn || listener.fn === fn) {\n      listeners.splice(i, 1);\n      return removeListeners(fn, listeners);\n    }\n  }\n}\n\n/**\n * Mixin emitter properties.\n */\n\nfunction mixin(obj) {\n  const ctor = obj.constructor;\n  Object.setPrototypeOf(obj, Emitter.prototype);\n  if (ctor) define(obj, 'constructor', ctor);\n  return obj;\n}\nfunction define(obj, key, val) {\n  Reflect.defineProperty(obj, key, {\n    configurable: true,\n    writable: true,\n    value: val\n  });\n}\n\n/**\n * Expose `Emitter`\n */\n\nmodule.exports = Emitter;","map":{"version":3,"names":["Emitter","constructor","obj","mixin","listeners","event","_listeners","define","_only","on","fn","only","push","once","off","apply","arguments","options","first","existing","_first","removeListeners","emit","slice","args","call","has","length","prototype","hasListeners","addListener","addEventListener","removeListener","removeAllListeners","removeEventListener","i","listener","splice","ctor","Object","setPrototypeOf","key","val","Reflect","defineProperty","configurable","writable","value","module","exports"],"sources":["C:/Users/badsc/Documents/GitHub/trading-dashboard-local/node_modules/@sellside/emitter/index.js"],"sourcesContent":["'use strict';\n\n/**\n * Initialize a new `Emitter`.\n *\n * ```js\n * const Emitter = require('emitter');\n * // as an `Emitter` instance\n * const emitter = new Emitter;\n * emitter.emit('something');\n * // or inherit\n * class MyEmitter extends Emitter {}\n * ```\n * @name Emitter\n * @api public\n */\n\nclass Emitter {\n  constructor(obj) {\n    if (obj) return mixin(obj);\n  }\n\n  /**\n   * Mixin methods from Emitter.\n   *\n   * ```js\n   * const Emitter = require('emitter');\n   * const obj = {};\n   * Emitter.mixin(obj);\n   * obj.on('status', console.log);\n   * obj.emit('status', 'I emit!');\n   * ```\n   * @name Emitter#mixin\n   * @param {Object} `obj`\n   * @return {Object}\n   * @api public\n   */\n\n  static mixin(obj) {\n    return new Emitter(obj);\n  }\n\n  /**\n   * Return the array of registered listeners for `event`.\n   *\n   * ```js\n   * // all listeners for event \"status\"\n   * console.log(emitter.listeners('status'));\n   * // all listeners\n   * console.log(emitter.listeners());\n   * ```\n   * @name .listeners\n   * @param {String} `event`\n   * @return {Array}\n   * @api public\n   */\n\n  listeners(event) {\n    if (!this._listeners) define(this, '_listeners', {});\n    if (!this._only) define(this, '_only', {});\n    if (!event) return this._listeners;\n    return this._listeners['$' + event] || (this._listeners['$' + event] = []);\n  }\n\n  /**\n   * Listen on the given `event` with `fn`.\n   *\n   * ```js\n   * emitter.on('foo', () => 'do stuff');\n   * ```\n   * @name .on\n   * @param {String} `event`\n   * @param {Function} `fn`\n   * @return {Emitter}\n   * @api public\n   */\n\n  on(event, fn) {\n    if (this._only && this._only[event]) {\n      return this.only(event, fn);\n    }\n    this.listeners(event).push(fn);\n    return this;\n  }\n\n  /**\n   * Adds an `event` listener that will be invoked a single\n   * time then automatically removed.\n   *\n   * ```js\n   * emitter.only('once', () => 'do stuff');\n   * ```\n   * @name .once\n   * @param {String} `event`\n   * @param {Function} `fn`\n   * @return {Emitter}\n   * @api public\n   */\n\n  once(event, fn) {\n    const on = function() {\n      this.off(event, on);\n      fn.apply(this, arguments);\n    };\n    on.fn = fn;\n    this.on(event, on);\n    return this;\n  }\n\n  /**\n   * Ensures that listeners for `event` are only **_registered_** once\n   * and are disabled correctly when specified. This is different from\n   * `.once`, which only **emits** once.\n   *\n   * ```js\n   * emitter.only('foo', () => 'do stuff');\n   * ```\n   * @name .only\n   * @param {String} `event`\n   * @param {Object} `options`\n   * @param {Function} `fn`\n   * @return {Emitter}\n   * @api public\n   */\n\n  only(event, options, fn) {\n    this.listeners();\n\n    if (typeof options === 'function') {\n      fn = options;\n      options = null;\n    }\n\n    if (options && options.first === true) {\n      define(this, '_first', true);\n    }\n\n    if (!fn || !event || !this._only[event]) {\n      this.off(event);\n      if (!fn) return this;\n    }\n\n    const existing = this._only[event];\n    if (existing) {\n      if (this._first === true) return this;\n      this.off(event, existing);\n    }\n\n    this._only[event] = fn;\n    this.listeners(event).push(fn);\n    return this;\n  }\n\n  /**\n   * Remove the given listener for `event`, or remove all\n   * registered listeners if `event` is undefined.\n   *\n   * ```js\n   * emitter.off();\n   * emitter.off('foo');\n   * emitter.off('foo', fn);\n   * ```\n   * @name .off\n   * @param {String} `event`\n   * @param {Function} `fn`\n   * @return {Emitter}\n   * @api public\n   */\n\n  off(event, fn) {\n    this.listeners();\n\n    // remove all listeners\n    if (!event) {\n      this._listeners = {};\n      this._only = {};\n      return this;\n    }\n\n    // remove all listeners for \"event\"\n    if (!fn) {\n      this._listeners['$' + event] = [];\n      this._only['$' + event] = [];\n      return this;\n    }\n\n    // remove all instances of \"fn\" from \"event\"\n    removeListeners(fn, this.listeners(event));\n    return this;\n  }\n\n  /**\n   * Emit `event` with the given args.\n   *\n   * ```js\n   * emitter.emit('foo', 'bar');\n   * ```\n   * @name .emit\n   * @param {String} `event`\n   * @param {Mixed} ...\n   * @return {Emitter}\n   */\n\n  emit(event) {\n    const listeners = this.listeners(event).slice();\n    const args = [].slice.call(arguments, 1);\n    for (const fn of listeners) {\n      fn.apply(this, args);\n    }\n    return this;\n  }\n\n  /**\n   * Returns true if the emitter has registered listeners for `event`.\n   *\n   * ```js\n   * emitter.on('foo', 'do stuff');\n   * console.log(emitter.has('foo')); // true\n   * console.log(emitter.has('bar')); // false\n   * ```\n   * @name .has\n   * @param {String} `event`\n   * @return {Boolean}\n   * @api public\n   */\n\n  has(event) {\n    return this.listeners(event).length > 0;\n  }\n}\n\n/**\n * Expose common aliases for `.has`, `.on` and `.off`\n */\n\nEmitter.prototype.hasListeners =\nEmitter.prototype.has;\n\nEmitter.prototype.addListener =\nEmitter.prototype.addEventListener =\nEmitter.prototype.on;\n\nEmitter.prototype.removeListener =\nEmitter.prototype.removeListeners =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener =\nEmitter.prototype.off;\n\n/**\n * Remove all instances of the given `fn` from listeners.\n */\n\nfunction removeListeners(fn, listeners) {\n  for (let i = 0; i < listeners.length; i++) {\n    const listener = listeners[i];\n    if (listener === fn || listener.fn === fn) {\n      listeners.splice(i, 1);\n      return removeListeners(fn, listeners);\n    }\n  }\n}\n\n/**\n * Mixin emitter properties.\n */\n\nfunction mixin(obj) {\n  const ctor = obj.constructor;\n  Object.setPrototypeOf(obj, Emitter.prototype);\n  if (ctor) define(obj, 'constructor', ctor);\n  return obj;\n}\n\nfunction define(obj, key, val) {\n  Reflect.defineProperty(obj, key, {\n    configurable: true,\n    writable: true,\n    value: val\n  });\n}\n\n/**\n * Expose `Emitter`\n */\n\nmodule.exports = Emitter;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}