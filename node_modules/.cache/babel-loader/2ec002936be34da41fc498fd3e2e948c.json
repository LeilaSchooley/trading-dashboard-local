{"ast":null,"code":"/* istanbul ignore file */\n// This is used in browsers only and is designed to allow the rest of\n// log4js to continue as if `clustering.js` is in use.\nvar isMaster = function isMaster() {\n  return true;\n};\nvar listeners = [];\nvar sendToListeners = function sendToListeners(logEvent) {\n  listeners.forEach(function (l) {\n    return l(logEvent);\n  });\n};\nmodule.exports = {\n  onlyOnMaster: function onlyOnMaster(fn, notMaster) {\n    return isMaster() ? fn() : notMaster;\n  },\n  isMaster: isMaster,\n  send: sendToListeners,\n  onMessage: function onMessage(listener) {\n    listeners.push(listener);\n  }\n};","map":{"version":3,"names":["isMaster","listeners","sendToListeners","logEvent","forEach","l","module","exports","onlyOnMaster","fn","notMaster","send","onMessage","listener","push"],"sources":["C:/Users/badsc/Documents/GitHub/trading-dashboard-local/node_modules/log4js/lib/clusteringBrowser.js"],"sourcesContent":["/* istanbul ignore file */\n// This is used in browsers only and is designed to allow the rest of\n// log4js to continue as if `clustering.js` is in use.\nconst isMaster = () => true;\n\nconst listeners = [];\n\nconst sendToListeners = (logEvent) => {\n  listeners.forEach((l) => l(logEvent));\n};\n\nmodule.exports = {\n  onlyOnMaster: (fn, notMaster) => (isMaster() ? fn() : notMaster),\n  isMaster,\n  send: sendToListeners,\n  onMessage: (listener) => {\n    listeners.push(listener);\n  },\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,IAAMA,QAAQ,GAAG,SAAXA,QAAQA,CAAA;EAAA,OAAS,IAAI;AAAA;AAE3B,IAAMC,SAAS,GAAG,EAAE;AAEpB,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,QAAQ,EAAK;EACpCF,SAAS,CAACG,OAAO,CAAC,UAACC,CAAC;IAAA,OAAKA,CAAC,CAACF,QAAQ,CAAC;EAAA,EAAC;AACvC,CAAC;AAEDG,MAAM,CAACC,OAAO,GAAG;EACfC,YAAY,EAAE,SAAAA,aAACC,EAAE,EAAEC,SAAS;IAAA,OAAMV,QAAQ,CAAC,CAAC,GAAGS,EAAE,CAAC,CAAC,GAAGC,SAAS;EAAA,CAAC;EAChEV,QAAQ,EAARA,QAAQ;EACRW,IAAI,EAAET,eAAe;EACrBU,SAAS,EAAE,SAAAA,UAACC,QAAQ,EAAK;IACvBZ,SAAS,CAACa,IAAI,CAACD,QAAQ,CAAC;EAC1B;AACF,CAAC"},"metadata":{},"sourceType":"script"}